{{#models}}
{{#model}}
package {{{packageName}}}.{{modelPackage}}.{{{classname}}};

import org.json.JSONObject;

public class {{classname}} {

    private JSONObject json;

    public {{classname}}(JSONObject json) {
        this.json = json;
    }

    public void isValid() throws NoSuchFieldException {
        {{#vars}}
        assert{{#lambda.pascalcase}}{{name}}{{/lambda.pascalcase}}();
        {{/vars}}
    }

{{#vars}}
    public boolean has{{#lambda.pascalcase}}{{name}}{{/lambda.pascalcase}}() {
        return this.json.has("{{name}}");
    }

    public boolean is{{#lambda.pascalcase}}{{name}}{{/lambda.pascalcase}}Required() {
        return {{#required}}true{{/required}}{{^required}}false{{/required}};
    }

    public void assert{{#lambda.pascalcase}}{{name}}{{/lambda.pascalcase}}() throws NoSuchFieldException {
        if (is{{#lambda.pascalcase}}{{name}}{{/lambda.pascalcase}}Required() && !has{{#lambda.pascalcase}}{{name}}{{/lambda.pascalcase}}()) {
            throw new NoSuchFieldException(this.json.toString());
        }
    }

    public {{dataType}} get{{#lambda.pascalcase}}{{name}}{{/lambda.pascalcase}}() {
        return this.{{#lambda.camelcase}}parse_{{dataType}}{{/lambda.camelcase}}(this.json, "{{name}}");
    }

{{/vars}}
    /**
     * support method.
     */
    private boolean parseBoolean(JSONObject json, String key) {
        return json.getBoolean(key);
    }

    /**
     * support method.
     */
    private Integer parseInteger(JSONObject json, String key) {
        return json.getInt(key);
    }

    /**
     * support method.
     */
    private Long parseLong(JSONObject json, String key) {
        return json.getLong(key);
    }

    /**
     * support method.
     */
    private Double parseDouble(JSONObject JSON, String key) {
        return json.getDouble(key);
    }

    /**
     * support method.
     */
    private LocalDateTime parseLocalDateTime(String key) {
        return LocalDateTime.parse(json.getString(key));
    }

}
{{/model}}
{{/models}}